Npm init -y
Npm install typescript

Typescript compiler
Npx tsc

Error 
Npx tsc filename.ts


npx tsc --init

strict mode


What is Angular?
Javascript Framework
Create reactive Single-Page-Applications SPAs

Angular Versioning

ng serve

local host 2400 default

copied file from video into folder
src app folder > app.component.html


cmd: cd Documents\BYU-4\fullstack\my-first-app

ADD BOOTSRAP TO PROJECT
npm install --save bootstrap@3
config file to edit: angular.json
architect > build > styles array > 
add entry before 
"node_modules/bootstrap/dist/css/bootstrap.min.css",


ng generate component servers
ng g c servers


- - - - - - -
databinding = Communication

string interpolation ( {{ data }})
property binding [property]="data"

event binding (event)="expression"

two-way-binding [(ngModel)]="data"


ng g service 

--flat


INJECT dependency:
private contactService: ContactService
providers: [ContactService]


Event EventEmitter
contactSelectedEvent 

@Output() selectedContactEvent = new EventEmitter<Contact>();
this.selectedContactEvent.emit(contact);

REMEMBER to not list providers in children components if you want to share the service with them
  providers: [ContactService]


injecting service into service 
need to attach @Injectable from angularcore so that
we can inject to receiving service
consider adding it for future compatability



routing to change url routes
Angular Router

 @angular/router
const appRoutes: Routes = [
	{ path: '', component: HomeComponent },
	{ path: 'users', component: UsersComponent },
	{ path: 'servers', component: UsersComponent },
]

need to add RouterModule to imports array
RouterModule.forRoot(appRoutes)

directive:
<router-outlet></router-outlet>


GET LINKS TO WORK
special directive not href

routerLink="/"
routerLink="/users"
[routerLink]="['/users', 'something']"

dynamically set active class
routerLinkActive="active"
for the first one
[routerLinkActiveOptions]="{exact: true}"


LOAD ROUTE PROGRAMATICALLY

inject router
constructor(private router: Router){}

this.router.navigate(['/servers']);


RELATIVE ROUTES

constructor(
private router: Router,
private route: ActivatedRoute
){}

this.router.navigate(['/servers'], {relativeTo: this.route});


routes for parameters with colon /:id


--skip-tests

import { ActivatedRoute, Params, Router } from '@angular/router';

ngIf to document selection



OBSERVABLES RXJS

private mySubscription: Subscription;
this.mySubscription = interval(period: 1000).subscribe( 
	next: count => {
	console.log(count);
}, error => {
	console.log(error);
	alert(error.message);
}, () => {
	console.log('cleanup/complete');
})

OnDestroy
ngOnDestroy()

this.mySubscription.unsubscribe();

Observable from rxjs

const customIntervalObs = Observable.create(observer => {
	let count = 0;
	setInterval(handler: () => {
		observer.next(count);

		if( count == 2){
			observer.complete();
		}

		if (count > 3){
			observer.error(new Error(message: 'Count greta'));
		}
		count++;
	}, timeout: 1000);
});

observable if an error is thrown it does not do complete method


OPERATORS

learnrxjs.io/operators
academind.com/learn rxjs
import { map } from 'rxjs/operators';
myObservable.pipe(
	map((data: number) => {

		return "Rount: " + (data + 1);
	},
	filter(data => {
		return data > 0;
	})
);


SUBJECT

buttons


import Subject from rxjs

mySubject = new Subject<boolean>(); similar to event emitter
thissubscription = this.userService.mySubject.next(true); equivalent to emit()
thissubscription.unsubscribe

use subjects instead of OBSERVABLES through services
unsubscribe from them
on OnDestroy






  
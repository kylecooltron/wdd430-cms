Npm init -y
Npm install typescript

Typescript compiler
Npx tsc

Error 
Npx tsc filename.ts


npx tsc --init

strict mode


What is Angular?
Javascript Framework
Create reactive Single-Page-Applications SPAs

Angular Versioning

ng serve

local host 2400 default

copied file from video into folder
src app folder > app.component.html


cmd: cd Documents\BYU-4\fullstack\my-first-app

ADD BOOTSRAP TO PROJECT
npm install --save bootstrap@3
config file to edit: angular.json
architect > build > styles array > 
add entry before 
"node_modules/bootstrap/dist/css/bootstrap.min.css",


ng generate component servers
ng g c servers


- - - - - - -
databinding = Communication

string interpolation ( {{ data }})
property binding [property]="data"

event binding (event)="expression"

two-way-binding [(ngModel)]="data"


ng g service 

--flat


INJECT dependency:
private contactService: ContactService
providers: [ContactService]


Event EventEmitter
contactSelectedEvent 

@Output() selectedContactEvent = new EventEmitter<Contact>();
this.selectedContactEvent.emit(contact);

REMEMBER to not list providers in children components if you want to share the service with them
  providers: [ContactService]


injecting service into service 
need to attach @Injectable from angularcore so that
we can inject to receiving service
consider adding it for future compatability



routing to change url routes
Angular Router

 @angular/router
const appRoutes: Routes = [
	{ path: '', component: HomeComponent },
	{ path: 'users', component: UsersComponent },
	{ path: 'servers', component: UsersComponent },
]

need to add RouterModule to imports array
RouterModule.forRoot(appRoutes)

directive:
<router-outlet></router-outlet>


GET LINKS TO WORK
special directive not href

routerLink="/"
routerLink="/users"
[routerLink]="['/users', 'something']"

dynamically set active class
routerLinkActive="active"
for the first one
[routerLinkActiveOptions]="{exact: true}"


LOAD ROUTE PROGRAMATICALLY

inject router
constructor(private router: Router){}

this.router.navigate(['/servers']);


RELATIVE ROUTES

constructor(
private router: Router,
private route: ActivatedRoute
){}

this.router.navigate(['/servers'], {relativeTo: this.route});


routes for parameters with colon /:id


--skip-tests

import { ActivatedRoute, Params, Router } from '@angular/router';

ngIf to document selection



OBSERVABLES RXJS

private mySubscription: Subscription;
this.mySubscription = interval(period: 1000).subscribe( 
	next: count => {
	console.log(count);
}, error => {
	console.log(error);
	alert(error.message);
}, () => {
	console.log('cleanup/complete');
})

OnDestroy
ngOnDestroy()

this.mySubscription.unsubscribe();

Observable from rxjs

const customIntervalObs = Observable.create(observer => {
	let count = 0;
	setInterval(handler: () => {
		observer.next(count);

		if( count == 2){
			observer.complete();
		}

		if (count > 3){
			observer.error(new Error(message: 'Count greta'));
		}
		count++;
	}, timeout: 1000);
});

observable if an error is thrown it does not do complete method


OPERATORS

learnrxjs.io/operators
academind.com/learn rxjs
import { map } from 'rxjs/operators';
myObservable.pipe(
	map((data: number) => {

		return "Rount: " + (data + 1);
	},
	filter(data => {
		return data > 0;
	})
);


SUBJECT

buttons


import Subject from rxjs

mySubject = new Subject<boolean>(); similar to event emitter
thissubscription = this.userService.mySubject.next(true); equivalent to emit()
thissubscription.unsubscribe

use subjects instead of OBSERVABLES through services
unsubscribe from them
on OnDestroy


FORMS


approaches template driven, reactive

  
If the library of ng2-dnd is not able to install, please try the following command:
npm install --skipLibCheck --save ng2-dnd@5.0.2 --force
npm install --skipLibCheck --save ng2-dnd@5.0.2 --force
npm install --skipLibCheck --save ng2-dnd@5.0.2 --force

Import forms module

Add it to imports array
In the app module
Ngmodel in the input tags
Name attribute
(NgSubmit) in the form element = "onsubmit(f)"
#f="ngForm"

OnSubmit(form: ngForm){

@viewchild type ngForm

Acquired  Email attribute

[Disabled]="!f.valid"

Input ng-invalid.ng-touched{

}

#Email="ngModel"


PIPES

transform Output on render in the template
| uppercase
| date:'fullDate':'somethingElse'

combine PIPES / chain pipes

angular.io
/docs/ts/latest/api/

new file "shorten.pipe.ts" 

import PipeTransform from angular core
pipe decorator
@Pipe({
	name: 'shorten'
})
export class ShortenPipe implements PipeTransform{
	transform(value: any, limit: number){
		return value.substr(0, limit);
	}
}
app module add ShortenPipe to declarations and import

| shorten:5

<input text='text' [(ngModel)]="filteredStatus">

filteredStatus: string='';

ng g pipe filterPipe

//filteer transform
if (value.length === 0 || filterString == ""){
	return value;
}
const resultArray = [];
for (const iteem of value){
	if (item[propName] === filterString){
		resultArray.push(item);
	}
}
return resultArray;

let server of servers | filters:filterStatus:'status'

reruns performance cost reloads any time the data changes
@Pipe({
	name:'myname',
	pure: false,
})

ASYNC pipe

appStatus = new Promise((resolve, reject) => {
	setTimeout(() => {
		resolve('stable');
	}, 2000);
});

| async


HTTP REQUESTS

connect to server API Http REQUESTS
File Upload
Ananlytics

Anatomy:
URL (API Endpoint) /posts/1
Http Verb POST, GET, PUT,
Headers (Metadata) {
	"Content-type":
}
Body {
	title: "New Post"
}


https://cms-wdd-430-default-rtdb.firebaseio.com/


app module add HttpClientModule from @angular/common/http
add to imports array

constructor( private http: HttpClient) {}

this.http.post(
	'https://cms-wdd-430-default-rtdb.firebaseio.com/documents.json',
	postData
	).subscribe(responseDate => {
		console.log(responseData);
	});
	Angular will automatically transform into json

	won't send the request if nobody is interested in the response SUBscribe

Sends two requests, options to see if it's allowed, and then normal http request


export interface Post {
	title: string;
	content: string;
	id?: string;
}

private fetchPosts() {
	this.http.get<{[key: string]: Post}>(https://cms-wdd-430-default-rtdb.firebaseio.com/documents.json).pipe(
		map(responseData => {  ///{[key: string]: Post}
			const postArray: Post[] = [];
			for (const key in responseData) {
				if (responseData.hasOwnProperty(key)){
					postArray.push({...responseData[key], id: key})
				}
			}
			return postsArray;
		})
	).subscribe(posts => {
		console.log(post);
	})
}

import map from rsjx operators

OBSERVABLE OPERATORS
angle brackets to add type definition to .get .post generic http methods response types

LOADING

isFetching = false;
set true then set false when done


SERVICES DO THE HEAVY LIFTING

Components are learn

posts.service.ts
@Injectable({providedIn: 'root'})
export class PostsService {
	constructor(private http: HttpClient){}
	createAndStorePost(title: string, ccontent: string){
	}
}

RETURNIG DATA FROM SERVICES
can subscribe
return the http request and subscribe to it in the component

this.http.delete('url');

postService.deletePosts.subscribe(() = list = []);

ERROR HANDLING

pass another function to subscribe((), (error) => {
	this.errorMessage = "An error occured" + error.message;
})

2nd way

in service

error = new Subject<string>;
this.error.next(error.message);

in component
private errorSub: Subscription;
this.errorSub = this.postService.error.subscribe(errMessage => {
	this.error = errorMessage;
})

ngOnDestroy
ngOnDestroy(){
	this.error.unsubscribe();
}

catchError from rxjs operators
throwError from rxjs

catchError(errorRes => {
	// send to analytics server
	return throwError(errorRes);
})

SETTING HEADERS   
QUERY PARAMS

all of them have a last argument with object

{
	headers: new HttpHeaders({ //from angular common
		'CustomHeader': 'Hello'
	}),
	params new HttpParams().set('print', 'pretty')
}

MULTIPLE PARAMS

let searchParams = new HttpParams();
searchParams = searchParams.append('print', 'pretty');
searchParams = searchParams.append('print', 'pretty');

OBSERVING DIFFERENT TYPES OF RESPONSES

extra argument to post request
{
	observe: 'body',
	observe: 'response'
}

even on delete
{
	observe: 'events'
}

.delete().pipe(
	tap(event => {
		console.log(event);
		if(event.type == HttpEventType.Sent){
			// tell the user the request was sent
			console.log(event.body);
		}
	})
)

responseType: 'text' / 'blob' / 'json'

MANIPuLATING REQUEST OBJECTS WITH OPERATORS
INTERSETTERS
custom header to all outgoing requests
authentication

auth-interceptor.service.ts

export class AuthInterceptorSeervice implements HttpInterceptor {
	intercept(req: HttpRequest<any>, next: HttpHandler) {
		console.log('Request is on it's way');


		//control in the interceptor
		//modify request object, but it's immutable so you need to use clone
		const modifiedRequest = req.clone({
			url: '',
			headers: req.headers.append('Auth', 'xyz');
		})
		return next.handle(modifiedRequest);


		return next.handle(req); 

		//can also modify response

		return next.handle(modifiedRequest).pipe(tap(event => {
			if(event.type === HttpEventType.Response){
				console.log('Response arrived);
			}
		}))
	}
}

app module in providers array
{
	provide: HTTP_INTERCEPTORS, // from common/http
	useClass: AuthInterceptorSeervice,
	multi: true,
},
{
	provide: HTTP_INTERCEPTORS, // multiple interceptors
	useClass: LoggingInterceptorService,
	multi: true,
}

the order you provide them is the order they are executed in



MEAN
Mongo Express Angular NodeJS

ng serve makes nodejs server only dev server

TWO 
	Node App serves Angular SPA 
	To Separated Servers served from Static host
	* both logically Separated

RESTful API
	Representational State Transfer
	Stateless backend
	paths: /users /posts /products
	GET POST DELETE PATCH PUT
	json but not a must!  XML URLEncoded FormData



PROJECT

new folder next to src folder "backend"
root folder new file server.js file
node server.js

const http = require('http');
const app = require('./backend/app');

const  = process.env.PORT || 3000;
app.set('port', port)
const server = http.createServer(app);

server.listen(port);


ADDING EXPRESS backend

npm install --save express

in > backend folder
app.js file

const express = require('express');
const app = express();

app.use((req, res, next) => {
	res.send("Hello");
});

module.exports = app;


MORE COMPLEXITY

const normalizePort = val => {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		return val;
	}
	if (port >= 0){
		return val;
	}
	return false;
}


const onError = error => {
	if(error.syscall !== "listen"){
		throw error;
	}
	etc.
}

server.on("error", onerror);

const debug = require("debug")("node-angular");

PACKAGE FOR AUTORESTART

npm install --save-dev nodemon


ADD PATH 

app.use('/posts', (req, res, next) => {
	const posts = [
		{
			id: 'string',
			title: 'Server',
			content: 'Content'
		},
		{
			id: 'string',
			title: 'Server',
			content: 'Content'
		}
	]
	res.status(200).json({
		message: "Posts from api",
		posts: posts,
	});
})



ANGULAR CONNECTION
import HttpClientModule from "...
to imorts array

import HttpClient from common
inject with constructor(private http: HttpClient){
}

getPosts(){
	this.http.get<{message: string, posts: Post[]}>('http://localhost:3000/posts')
	.subscribe((body) => {
		this.posts = body.posts;
		this.postsUpdates.next([...this.posts]);
	})
}



NO ACCESS CONTROL ERROR CORS Cross-Origin Resource Sharing
If on different hosts 
Disable default mechanism
app.jsadd additional middleware

app.use((req, res, next) => {
	res.setHeader('Access-Control-Allow-Origin", "*");
	res.setHeader('Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
	res.setHeader('Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE, PUT, OPTIONS");
	next();
})

npm install --save body-parser *
const bodyParser = require("body-parser");
app.use(bodyParser.json());

app.post(
const post = req.body;
res.status(201).json({
	message: 'post succesful'
});
)
app.get()

this.http.post<{message: string}>('url', post)
.subscribe((responseData) => {
	console.log(responseData.message);
})

